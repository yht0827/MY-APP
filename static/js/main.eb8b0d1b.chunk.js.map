{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","title","react_default","a","createElement","src","className","alt","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAqCA,SAASA,EAATC,GAAqC,IAAfC,EAAeD,EAAfC,OAAOC,EAAQF,EAARE,MACzB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQM,UAAU,eAAeC,IAAKN,EAAOA,MAAOA,IAItE,SAASO,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACrB,OACQR,EAAAC,EAAAC,cAAA,QAAME,UAAU,eAAeI,GAexBC,MAxDf,SAAAC,GAA+C,IAA/BX,EAA+BW,EAA/BX,MAAMD,EAAyBY,EAAzBZ,OAAOa,EAAkBD,EAAlBC,OAAOC,EAAWF,EAAXE,SAChC,OAEIZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAEPJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACfJ,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQO,IAAKN,KAGlCC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACfJ,EAAAC,EAAAC,cAAA,UAAKH,IAGLC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACdO,EAAOE,IAAI,SAACL,EAAMM,GAAP,OAAiBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAG5Dd,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBACZQ,KC6BFI,6MA7CbC,MAAQ,KAMVC,cAAgB,WAWd,OATeC,EAAKF,MAAMG,OAAOP,IAAI,SAACQ,GACpC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,CACCvB,MAAOsB,EAAME,cACbzB,OAAQuB,EAAMG,mBACdC,GAAIJ,EAAMI,GACVd,OAAQU,EAAMV,OACdC,SAAYS,EAAMT,gBAM5Bc,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYb,EAAKc,WADjB,OACHb,EADGU,EAAAI,KAETf,EAAKgB,SAAS,CACZf,WAHO,wBAAAU,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACT,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAG,OAAGC,QAAQC,IAAIF,yFA5BzBP,KAAKX,8CAmCD,OACE1B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACZiC,KAAKpB,MAAMG,OAASiB,KAAKnB,gBAAkB,kBA1CtC6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.eb8b0d1b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\n\r\nfunction Movie({title,poster,genres,synopsis}) {\r\n    return(\r\n        \r\n        <div className=\"Movie\" >\r\n        \r\n                <div className=\"Movie_Columns\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n                </div>\r\n\r\n                <div className=\"Movie_columns\">\r\n                <h1>{title}</h1>\r\n                </div>\r\n           \r\n                <div className=\"Movie_Genres\">\r\n                {genres.map((genre,index) => <MovieGenre genre={genre} key={index}/>)}\r\n                </div>\r\n            \r\n                <p className=\"Movie_Synopsis\">\r\n                {synopsis}\r\n                </p>\r\n        \r\n        </div>\r\n        )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis : PropTypes.string.isRequired\r\n}\r\n\r\n\r\nfunction MoviePoster({poster,title}) {\r\n    return(\r\n        <img src={poster} className=\"Movie_Poster\" alt={title} title={title} />           \r\n )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\nreturn(\r\n        <span className=\"Movie_Genre\">{genre}</span>\r\n\r\n)\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre : PropTypes.string.isRequired\r\n}\r\n\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt:PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie.js';\n\nclass App extends Component {\n\n  state = {}\n\n  componentDidMount(){\n    this._getMovies();\n}\n\n_renderMovies = ()=> {\n\n  const movies = this.state.movies.map((movie) => {\n    return <Movie\n            title={movie.title_english} \n            poster={movie.medium_cover_image} \n            id={movie.id} \n            genres={movie.genres}\n            synopsis = {movie.synopsis}\n            /> \n  })  \n  return movies\n}\n\n  _getMovies = async () => {\n      const movies = await this._callApi()\n      this.setState({\n        movies //movies : movies\n      })\n  }\n\n  _callApi = ()=> {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err=> console.log(err))\n    /* function((err){\n      console.log(err)\n    })\n*/\n    }\n    render() {\n        return (\n          <div className=\"App\">\n            {this.state.movies ? this._renderMovies() : 'Loading'}\n          </div>\n        );\n      }\n    }\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}